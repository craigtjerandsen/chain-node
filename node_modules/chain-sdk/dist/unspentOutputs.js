'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var shared = require('./shared');

/**
 * @class
 * Each new transaction in the blockchain consumes some unspent outputs and
 * creates others. An output is considered unspent when it has not yet been used
 * as an input to a new transaction. All asset units on a blockchain exist in
 * the unspent output set.
 * <br/><br/>
 * More info: {@link https://chain.com/docs/core/build-applications/unspent-outputs}
 */

var UnspentOutputs =
/**
 * constructor - return UnspentOutputs object configured for specified Chain Core.
 *
 * @param {Client} client Configured Chain client object.
 */
function UnspentOutputs(client) {
  var _this = this;

  _classCallCheck(this, UnspentOutputs);

  /**
   * Get one page of unspent outputs matching the specified query.
   *
   * @param {Query} params={} Filter and pagination information.
   * @param {pageCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
   * @returns {Promise<Page>} Requested page of results
   */
  this.query = function (params, cb) {
    return shared.query(client, _this, '/list-unspent-outputs', params, { cb: cb });
  };

  /**
   * Request all unspent outputs matching the specified query, calling the
   * supplied processor callback with each item individually.
   *
   * @param {Query} params Filter and pagination information.
   * @param {QueryProcessor} processor Processing callback.
   * @returns {Promise} A promise resolved upon processing of all items, or
   *                   rejected on error
   */
  this.queryAll = function (params, processor) {
    return shared.queryAll(_this, params, processor);
  };
};

module.exports = UnspentOutputs;