'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var shared = require('./shared');

/**
 * @class
 * An account is an object in Chain Core that tracks ownership of assets on a
 * blockchain by creating and tracking control programs.
 *
 * <br/><br/>
 * More info: {@link https://chain.com/docs/core/build-applications/accounts}
 */

var Accounts =
/**
 * @typedef Accounts~createRequest
 * @type {Object}
 *
 * @property {String} [alias]
 * User specified, unique identifier.
 *
 * @property {string[]} rootXpubs
 * The list of keys used to create control programs under the account.
 *
 * @property {Number} quorum
 * The number of keys required to sign transactions for the account.
 *
 * @property {Object} [tags]
 * User-specified tag structure for the account.
 */

/**
 * constructor - return Accounts object configured for specified Chain Core.
 *
 * @param {Client} client Configured Chain client object.
 */
function Accounts(client) {
  var _this = this;

  _classCallCheck(this, Accounts);

  /**
   * Create a new account.
   *
   * @param {Accounts~createRequest} params - Parameters for account creation.
   * @param {objectCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
   * @returns {Promise<Object>} Newly created account.
   */
  this.create = function (params, cb) {
    return shared.create(client, '/create-account', params, { cb: cb });
  };

  /**
   * Create multiple new accounts.
   *
   * @param {Accounts~createRequest[]} params - Parameters for creation of multiple accounts.
   * @param {batchCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
   * @returns {BatchResponse} Newly created accounts.
   */
  this.createBatch = function (params, cb) {
    return shared.createBatch(client, '/create-account', params, { cb: cb });
  };

  /**
   * Get one page of accounts matching the specified query.
   *
   * @param {Query} params={} Filter and pagination information.
   * @param {pageCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
   * @returns {Promise<Page>} Requested page of results
   */
  this.query = function (params, cb) {
    return shared.query(client, _this, '/list-accounts', params, { cb: cb });
  };

  /**
   * Request all accounts matching the specified query, calling the
   * supplied processor callback with each item individually.
   *
   * @param {Query} params={} - Filter information.
   * @param {QueryProcessor} processor - Processing callback.
   * @returns {Promise} A promise resolved upon processing of all items, or
   *                   rejected on error.
   */
  this.queryAll = function (params, processor) {
    return shared.queryAll(_this, params, processor);
  };

  /**
   * Create a new control program, specifying either an account ID or account
   * alias to indicate the controlling party.
   * <br/><br/>
   * More info: {@link https://chain.com/docs/core/build-applications/control-programs#account-control-programs}
   *
   * @param {Object} params Object containing either alias or ID identifying
   *                      account to create control program for.
   * @param {String} [params.alias] - An account alias. Either this or `id` is required.
   * @param {String} [params.id] - An account ID. Either this or `alias` is required.
   * @param {objectCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
   * @returns {Promise<Object>} Newly created control program.
   */
  this.createControlProgram = function (params, cb) {
    var body = { type: 'account' };

    if (params.alias) body.params = { accountAlias: params.alias };
    if (params.id) body.params = { accountId: params.id };

    return shared.tryCallback(shared.create(client, '/create-control-program', body), cb);
  };
};

module.exports = Accounts;