'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var shared = require('./shared');

/**
 * @class
 * There are two APIs in Chain Core: the client API and the network API. Each
 * API is authenticated using access tokens with HTTP Basic Authentication.
 * <br/><br/>
 * More info: {@link https://chain.com/docs/core/learn-more/authentication}
 */

var AccessTokens =
/**
 * constructor - return AccessTokens object configured for specified Chain Core.
 *
 * @param {Client} client Configured Chain client object.
 */
function AccessTokens(client) {
  var _this = this;

  _classCallCheck(this, AccessTokens);

  /**
   * Create a new access token.
   *
   * @param {Object} params - Parameters for access token creation.
   * @param {String} params.id - User specified, unique identifier.
   * @param {String} params.type - Either 'client' or 'network'.
   * @param {objectCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
   * @returns {Promise<Object>} Newly created access token.
   */
  this.create = function (params, cb) {
    return shared.create(client, '/create-access-token', params, { skipArray: true, cb: cb });
  };

  /**
   * Get a list of access tokens sorted by descending creation time,
   * optionally filtered by type.
   *
   * Note: maximum list size is 1000 items
   *
   * @param {Query} params - Pagination information.
   * @param {String} [params.type] - Type of access tokens to return.
   * @param {pageCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
   * @returns {Promise<Page>} Requested page of results.
   */
  this.query = function (params, cb) {
    params = params || {};
    params.pageSize = 1000;
    return shared.query(client, _this, '/list-access-tokens', params, { cb: cb });
  };

  /**
   * Delete the specified access token.
   *
   * @param {String} id - Access token ID.
   * @param {objectCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
   * @returns {Promise<Object>} Status of deleted object
   */
  this.delete = function (id, cb) {
    return shared.tryCallback(client.request('/delete-access-token', { id: id }), cb);
  };
};

module.exports = AccessTokens;