'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var uuid = require('uuid');
var shared = require('./shared');

/**
 * @class
 * Cryptographic private keys are the primary authorization mechanism on a
 * blockchain. For development environments, Chain Core provides a convenient
 * Mock HSM
 * <br/><br/>
 * More info: {@link https://chain.com/docs/core/build-applications/keys}
 */

var MockHsmKeys =
/**
 * constructor - return MockHsmKeys object configured for specified Chain Core.
 *
 * @param {Client} client Configured Chain client object.
 */
function MockHsmKeys(client) {
  var _this = this;

  _classCallCheck(this, MockHsmKeys);

  /**
   * Create a new MockHsm key.
   *
   * @param {Object} [params={}] - Parameters for access token creation.
   * @param {createCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
   * @param {String} params.alias - User specified, unique identifier.
   * @param {objectCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
   * @returns {Promise<Object>} Newly created Mock HSM key
   */
  this.create = function (params, cb) {
    var body = Object.assign({ clientToken: uuid.v4() }, params);
    return shared.tryCallback(client.request('/mockhsm/create-key', body).then(function (data) {
      return data;
    }), cb);
  };

  /**
   * Get one page of MockHsm keys, optionally filtered to specified aliases.
   *
   * @param {Query} params={} Filter and pagination information.
   * @param {Array.<string>} [params.aliases] List of requested aliases, max 200.
   * @param {pageCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
   * @returns {Promise<Page>} Requested page of results
   */
  this.query = function (params, cb) {
    if (Array.isArray(params.aliases) && params.aliases.length > 0) {
      params.pageSize = params.aliases.length;
    }

    return shared.query(client, _this, '/mockhsm/list-keys', params, { cb: cb });
  };

  /**
   * Request all MockHsm keys matching the specified query, calling the
   * supplied processor callback with each item individually.
   *
   * @param {QueryProcessor} processor Processing callback.
   * @returns {Promise} A promise resolved upon processing of all items, or
   *                   rejected on error
   */
  this.queryAll = function (processor) {
    return shared.queryAll(_this, {}, processor);
  };
};

module.exports = MockHsmKeys;